1. data preprocessor

    Objective: determine the weight of each branch(map childrenNum -> weight)

    File: preprocessor.js

    Method: 
    1. getTreeData (recursive function)

        a. traverse all person and assign new colors to their gender [man, woman, unknown]
        b. find all unique research areas, store them inside a set
        c. store researcher's name and their coresponding mentee number inside a map

    2. calculate some important values

        a. sum = suming up all the mentee number inside the map
        b. max = the maximum number inside the map
        c. min = the minimum number inside the map
        d. range_mean = (max - min) / 2 
      
    3.  oversampling/undersampling (for loop)

        reason for doing this is that when plotting the trees using the original weights, some mentor have too many mentees, but other may have very few, make the tree look bad :)
        show some math equation below:

        """
        weight = w 
        children_num = cn
        range_mean = rm
       
        Original equation:
        w_i = cn_i / sum

        New equation:
        [I tried serveral ways to calculate the weight while preserve the most information about the children_num distribution, this equation yields the best result]

        w_i = [cn_i - |cn_i - rm| * 0.1] / sum ,(cn_i > rm)

              cn_i / sum, (cn_i = rm)

              [cn_i + |cn_i - rm| * 0.1] / sum ,(cn_i < rm)
              
        """ 
            
    3. iterate the map and calculate the weight of each person using the equation above,
        replace children_num with weight inside the map
        

    4. addWeight(recursive function) 
        a. traverse all the researchers and add the calculated weight to each of them
    

======================

2. Tree Implementation

    Objective: plot the tree using p5js

    File: tree.js, index.html

    Method: 
    1. assignColor
        a. hsb color system uses the value 0 from 360 to represent different colors, the color starts with red and ends with red, which might confuse users, so I took the value from 0 to 340 to avoid 
           the cirlce. then I equally divided the value(340) by the number of research areas, and assigned a unique hue value to each of the research area. Finally, I store the research area name and
           their coresponding hue value inside a colorMap
    2. drawLegend
        a. iterate over the colorMap, get the research area and its corrseponding color and plot them
    3. buildTree (recursive function)
        a. first we need to translate our starting point to (width/2, height), which is the mid-bottom point on the screen
        b. default branch is defined by 2 vectors, "begin"(0,0) and "end"(0,-100). 
        c. when it's traversing the current branch, it will first plot all its children, by changing the end 

        """
        male tilting angle = -PI/(coefficient - degreeA)

        female tilting angle = PI/(coefficient - degreeB)
        """
    4. drawLeaf

